#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "GridMaterial"]

def Xform "Root"
{
    reorder nameChildren = ["MyMaterial", "Sphere", "Helpers", "ClockMaterial", "TestMaterial", "NodeGraph"]
    def Material "MyMaterial"
    {
        reorder nameChildren = ["LightBands", "Screen", "Hull", "RainbowRamp", "RedFadeRamp", "LightUpRamp", "PreviewSurface", "Overlay", "Red", "Rainbow"]
        float inputs:Time = 6.7 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-87.92578, 477.5)
                    float2 sizeInSubgraph = (99, 53)
                    int stackingOrderInSubgraph = 1672
                }
            }
        )
        prepend token outputs:mtlx:surface.connect = </Root/MyMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex.connect = </Root/MyMaterial/GeometryModifier.outputs:out>
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:realitykit:vertex"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1440.4905, 330.39114)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1653

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            float inputs:clearcoat
            float inputs:clearcoatRoughness
            color3f inputs:diffuseColor = (0.46135616, 0.017613119, 0) (
                colorSpace = "srgb_displayp3"
            )
            color3f inputs:diffuseColor.connect = </Root/MyMaterial/Mix.outputs:out>
            color3f inputs:emissiveColor
            float inputs:ior
            float inputs:metallic = 1
            float3 inputs:normal
            float inputs:occlusion
            float inputs:opacity = 1
            float inputs:opacityThreshold
            float inputs:roughness
            token outputs:out
            float2 ui:nodegraph:node:pos = (1201.8972, 217.7731)
            float2 ui:nodegraph:node:size = (159.5, 307)
            int ui:nodegraph:node:stackingOrder = 1655
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:opacityThreshold", "Advanced", "inputs:occlusion"]
        }

        def NodeGraph "LightBands"
        {
            color3f outputs:Screen_out.connect = </Root/MyMaterial/LightBands/Multiply.outputs:out>
            float2 ui:nodegraph:node:pos = (301.13672, -49.29297)
            float2 ui:nodegraph:node:size = (122.5, 81)
            int ui:nodegraph:node:stackingOrder = 1033
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Screen_out"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (772.0042, 345.42212)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (200.08124, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 483

            def Shader "Screen"
            {
                uniform token info:id = "ND_screen_color3"
                color3f inputs:bg.connect = </Root/MyMaterial/LightBands/Pink2.outputs:Multiply_out>
                color3f inputs:fg.connect = </Root/MyMaterial/LightBands/Orange1.outputs:Multiply_out>
                float inputs:mix = 1
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (249.79333, 156.66235)
                float2 ui:nodegraph:node:size = (109, 145)
                int ui:nodegraph:node:stackingOrder = 453
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:mix"]
            }

            def "Orange1" (
                active = true
                instanceable = true
                references = </Root/Helpers/LightBand>
            )
            {
                float inputs:Center_X = 0.3 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (187.42912, 261.4297)
                            float2 sizeInSubgraph = (126.5, 53)
                            int stackingOrderInSubgraph = 187
                        }
                    }
                )
                color3f inputs:Color = (1, 0.84493464, 0.63382) (
                    colorSpace = "srgb_texture"
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (916, 316)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 186
                        }
                    }
                )
                float inputs:Oversaturation = 1.5 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1013.91406, 336.05078)
                            float2 sizeInSubgraph = (160.5, 53)
                            int stackingOrderInSubgraph = 211
                        }
                    }
                )
                float inputs:Sharpness = -500 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (563.1331, 250.48735)
                            float2 sizeInSubgraph = (134, 53)
                            int stackingOrderInSubgraph = 185
                        }
                    }
                )
                color3f outputs:Multiply_out.connect = </Root/MyMaterial/LightBands/Orange1/Multiply.outputs:out>
                float2 ui:nodegraph:node:pos = (64.691895, 103.4302)
                float2 ui:nodegraph:node:size = (125.5, 163)
                int ui:nodegraph:node:stackingOrder = 475
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Center_X", "inputs:Sharpness", "inputs:Sharpness", "inputs:Oversaturation"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (173, 81)
            }

            def Shader "Screen_1"
            {
                uniform token info:id = "ND_screen_color3"
                color3f inputs:bg.connect = </Root/MyMaterial/LightBands/Orange4.outputs:Multiply_out>
                color3f inputs:fg.connect = </Root/MyMaterial/LightBands/Pink3.outputs:Multiply_out>
                float inputs:mix = 1
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (248.58849, 555.3816)
                float2 ui:nodegraph:node:size = (109, 145)
                int ui:nodegraph:node:stackingOrder = 455
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:mix"]
            }

            def Shader "Screen_2"
            {
                uniform token info:id = "ND_screen_color3"
                color3f inputs:bg.connect = </Root/MyMaterial/LightBands/Screen_1.outputs:out>
                color3f inputs:fg.connect = </Root/MyMaterial/LightBands/Screen.outputs:out>
                float inputs:mix
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (414.02347, 313.65445)
                float2 ui:nodegraph:node:size = (111.5, 145)
                int ui:nodegraph:node:stackingOrder = 449
            }

            def "Pink2" (
                active = true
                instanceable = true
                references = </Root/Helpers/LightBand>
            )
            {
                float inputs:Center_X = 0.4 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (187.42912, 261.4297)
                            float2 sizeInSubgraph = (126.5, 53)
                            int stackingOrderInSubgraph = 187
                        }
                    }
                )
                color3f inputs:Color (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (916, 316)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 186
                        }
                    }
                )
                float inputs:Oversaturation = 2 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1013.91406, 336.05078)
                            float2 sizeInSubgraph = (160.5, 53)
                        }
                    }
                )
                float inputs:Sharpness = -100 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (563.1331, 250.48735)
                            float2 sizeInSubgraph = (134, 53)
                            int stackingOrderInSubgraph = 185
                        }
                    }
                )
                color3f outputs:Multiply_out.connect = </Root/MyMaterial/LightBands/Pink2/Multiply.outputs:out>
                float2 ui:nodegraph:node:pos = (66.63821, 293.38705)
                float2 ui:nodegraph:node:size = (125.5, 163)
                int ui:nodegraph:node:stackingOrder = 474
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Oversaturation"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (205, 81)
            }

            def "Pink3" (
                active = true
                instanceable = true
                references = </Root/Helpers/LightBand>
            )
            {
                float inputs:Center_X = 0.6 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (187.42912, 261.4297)
                            float2 sizeInSubgraph = (110, 53)
                            int stackingOrderInSubgraph = 187
                        }
                    }
                )
                color3f inputs:Color (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (916, 316)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 186
                        }
                    }
                )
                float inputs:Oversaturation (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1013.91406, 336.05078)
                            float2 sizeInSubgraph = (160.5, 53)
                        }
                    }
                )
                float inputs:Sharpness = -100 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (563.1331, 250.48735)
                            float2 sizeInSubgraph = (134, 53)
                            int stackingOrderInSubgraph = 185
                        }
                    }
                )
                color3f outputs:Multiply_out.connect = </Root/MyMaterial/LightBands/Pink3/Multiply.outputs:out>
                float2 ui:nodegraph:node:pos = (69.33479, 485.2196)
                float2 ui:nodegraph:node:size = (125.5, 163)
                int ui:nodegraph:node:stackingOrder = 473
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Color", "inputs:Sharpness", "inputs:Sharpness"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (173, 81)
            }

            def "Orange4" (
                active = true
                instanceable = true
                references = </Root/Helpers/LightBand>
            )
            {
                float inputs:Center_X = 0.7 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (187.42912, 261.4297)
                            float2 sizeInSubgraph = (110, 53)
                            int stackingOrderInSubgraph = 187
                        }
                    }
                )
                color3f inputs:Color = (1, 0.84493464, 0.63382) (
                    colorSpace = "srgb_texture"
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (916, 316)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 186
                        }
                    }
                )
                float inputs:Oversaturation = 1.5
                float inputs:Sharpness = -500 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (563.1331, 250.48735)
                            float2 sizeInSubgraph = (134, 53)
                            int stackingOrderInSubgraph = 185
                        }
                    }
                )
                color3f outputs:Multiply_out.connect = </Root/MyMaterial/LightBands/Orange4/Multiply.outputs:out>
                float2 ui:nodegraph:node:pos = (69.13808, 679.91345)
                float2 ui:nodegraph:node:size = (125.5, 163)
                int ui:nodegraph:node:stackingOrder = 472
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (205, 81)
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_color3FA"
                prepend color3f inputs:in1.connect = </Root/MyMaterial/LightBands/Screen_2.outputs:out>
                float inputs:in2 = 0.9
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (565.23456, 374.04367)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 481
            }
        }

        def Shader "Screen"
        {
            uniform token info:id = "ND_screen_color3"
            color3f inputs:bg.connect = </Root/MyMaterial/Overlay.outputs:out>
            color3f inputs:fg.connect = </Root/MyMaterial/LightBands.outputs:Screen_out>
            float inputs:mix = 0
            float inputs:mix.connect = </Root/MyMaterial/LightUpRamp.outputs:Strength>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (491.67578, 112.90234)
            float2 ui:nodegraph:node:size = (109, 145)
            int ui:nodegraph:node:stackingOrder = 1539
        }

        def Shader "Overlay"
        {
            uniform token info:id = "ND_overlay_color3"
            color3f inputs:bg.connect = </Root/MyMaterial/Hull.outputs:Multiply_3_out>
            color3f inputs:fg.connect = </Root/MyMaterial/Red.outputs:out>
            float inputs:mix.connect = </Root/MyMaterial/RedFadeRamp.outputs:Strength>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (266.26562, 107.47656)
            float2 ui:nodegraph:node:size = (109, 145)
            int ui:nodegraph:node:stackingOrder = 1046
        }

        def Shader "Red"
        {
            uniform token info:id = "ND_constant_color3"
            color3f inputs:value = (0.3422197, 0.0013372697, 0.03735827) (
                colorSpace = "srgb_texture"
            )
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (89.08203, 21.929688)
            float2 ui:nodegraph:node:size = (151, 53)
            int ui:nodegraph:node:stackingOrder = 1617
        }

        def "LightUpRamp" (
            active = true
            instanceable = true
            references = </Root/Helpers/TimeRamp>
        )
        {
            float inputs:AscendDelay (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (94.99579, 157.15468)
                        float2 sizeInSubgraph = (149.5, 53)
                        int stackingOrderInSubgraph = 979
                    }
                }
            )
            float inputs:AscendTime = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (89.63135, 250.94093)
                        float2 sizeInSubgraph = (145, 53)
                        int stackingOrderInSubgraph = 981
                    }
                }
            )
            float inputs:DescentDelay = 2.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (91.80724, 367.71136)
                        float2 sizeInSubgraph = (154, 53)
                        int stackingOrderInSubgraph = 1015
                    }
                }
            )
            float inputs:DescentTime = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (89.29781, 469.2947)
                        float2 sizeInSubgraph = (149.5, 53)
                        int stackingOrderInSubgraph = 987
                    }
                }
            )
            float inputs:Time (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (74.75, 56)
                        float2 sizeInSubgraph = (99, 53)
                        int stackingOrderInSubgraph = 943
                    }
                }
            )
            float inputs:Time.connect = </Root/MyMaterial/RedFadeRamp.outputs:TimeSinceDescent>
            float outputs:Strength.connect = </Root/MyMaterial/LightUpRamp/Multiply.outputs:out>
            float outputs:TimeSinceDescent.connect = </Root/MyMaterial/LightUpRamp/Subtract_3.outputs:out>
            float2 ui:nodegraph:node:pos = (330.91797, 435.21597)
            float2 ui:nodegraph:node:size = (135, 199)
            int ui:nodegraph:node:stackingOrder = 1664
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:AscendDelay", "outputs:Strength"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (210, 99)
        }

        def "RedFadeRamp" (
            active = true
            instanceable = true
            references = </Root/Helpers/TimeRamp>
        )
        {
            float inputs:AscendDelay = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (94.99579, 157.15468)
                        float2 sizeInSubgraph = (149.5, 53)
                        int stackingOrderInSubgraph = 979
                    }
                }
            )
            float inputs:AscendTime = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (89.63135, 250.94093)
                        float2 sizeInSubgraph = (145, 53)
                        int stackingOrderInSubgraph = 981
                    }
                }
            )
            float inputs:DescentDelay = 4 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (91.80724, 367.71136)
                        float2 sizeInSubgraph = (154, 53)
                        int stackingOrderInSubgraph = 1015
                    }
                }
            )
            float inputs:DescentTime = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (89.29781, 469.2947)
                        float2 sizeInSubgraph = (149.5, 53)
                        int stackingOrderInSubgraph = 987
                    }
                }
            )
            float inputs:Time (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (74.75, 56)
                        float2 sizeInSubgraph = (99, 53)
                        int stackingOrderInSubgraph = 943
                    }
                }
            )
            float inputs:Time.connect = </Root/MyMaterial.inputs:Time>
            float2 ui:nodegraph:node:pos = (91.06641, 438.30972)
            float2 ui:nodegraph:node:size = (139.5, 199)
            int ui:nodegraph:node:stackingOrder = 1667
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:AscendDelay", "outputs:TimeSinceDescent"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (210, 99)
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/MyMaterial.inputs:Time>
            float inputs:in2 = 6
            float outputs:out
            float2 ui:nodegraph:node:pos = (310.92188, 276.51562)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 1671
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out", "outputs:out"]
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_color3"
            color3f inputs:bg.connect = </Root/MyMaterial/Screen.outputs:out>
            color3f inputs:fg.connect = </Root/MyMaterial/Rainbow.outputs:Out>
            float inputs:mix.connect = </Root/MyMaterial/Rainbow.outputs:Mask>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (792.3958, 119.19797)
            float2 ui:nodegraph:node:size = (109, 145)
            int ui:nodegraph:node:stackingOrder = 1661
        }

        def "Rainbow" (
            active = true
            instanceable = true
            references = </Root/Helpers/Rainbow>
        )
        {
            float inputs:Time (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-238.41086, 381.92343)
                        float2 sizeInSubgraph = (99, 53)
                        int stackingOrderInSubgraph = 521
                    }
                }
            )
            float inputs:Time.connect = </Root/MyMaterial/Subtract.outputs:out>
            float2 ui:nodegraph:node:pos = (637.23596, 276.52386)
            float2 ui:nodegraph:node:size = (103.5, 127)
            int ui:nodegraph:node:stackingOrder = 1659
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Background", "outputs:Out"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (131.5, 81)
        }

        def "Hull" (
            active = true
            instanceable = true
            references = </Root/Helpers/Hull>
        )
        {
            float2 ui:nodegraph:node:pos = (62.8125, 126.76172)
            float2 ui:nodegraph:node:size = (103.5, 81)
            int ui:nodegraph:node:stackingOrder = 1290
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 81)
        }
    }

    def Sphere "Sphere" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/MyMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 1
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Material "Helpers"
    {
        reorder nameChildren = ["LightBand", "TimeRamp", "Screen", "Rainbow", "Rainbow_1", "Time", "Metal", "Constant", "Overlay", "PreviewSurface"]
        prepend token outputs:mtlx:surface.connect = </Root/Helpers/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (731.10156, 86.27344)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1072

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            float inputs:clearcoat
            float inputs:clearcoatRoughness
            color3f inputs:diffuseColor.connect = </Root/Helpers/Rainbow.outputs:Out>
            color3f inputs:emissiveColor
            float inputs:ior
            float inputs:metallic
            float3 inputs:normal
            float inputs:occlusion
            float inputs:opacity
            float inputs:roughness
            token outputs:out
            float2 ui:nodegraph:node:pos = (483.25, 113.43359)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 1075
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:diffuseColor"]
        }

        def NodeGraph "LightBand"
        {
            float inputs:Center_X = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (298, 240)
                        float2 sizeInSubgraph = (126.5, 53)
                        int stackingOrderInSubgraph = 226
                    }
                }
            )
            color3f inputs:Color = (1, 0.61542875, 0.90818304) (
                colorSpace = "srgb_texture"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (604, 347.5)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 235
                    }
                }
            )
            float inputs:Oversaturation = 2 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1056.5859, 326.78125)
                        float2 sizeInSubgraph = (160.5, 53)
                        int stackingOrderInSubgraph = 211
                    }
                }
            )
            float inputs:Sharpness = -50 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (604, 234.5)
                        float2 sizeInSubgraph = (134, 53)
                        int stackingOrderInSubgraph = 236
                    }
                }
            )
            color3f outputs:Multiply_out.connect = </Root/Helpers/LightBand/Gamma.outputs:out>
            float2 ui:nodegraph:node:pos = (-206.15625, 421.41797)
            float2 ui:nodegraph:node:size = (125.5, 163)
            int ui:nodegraph:node:stackingOrder = 1135
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1752.0957, 184.34375)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (205.32477, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 203

            def Shader "Separate2"
            {
                uniform token info:id = "ND_separate2_vector2"
                float2 inputs:in.connect = </Root/Helpers/LightBand/Texcoord.outputs:out>
                float outputs:outx
                float outputs:outy
                float2 ui:nodegraph:node:pos = (298, 63.5)
                float2 ui:nodegraph:node:size = (115, 127)
                int ui:nodegraph:node:stackingOrder = 229
            }

            def Shader "Power"
            {
                uniform token info:id = "ND_power_float"
                float inputs:in1.connect = </Root/Helpers/LightBand/Subtract_1.outputs:out>
                float inputs:in2 = 2
                float outputs:out
                float2 ui:nodegraph:node:pos = (604, 88.75)
                float2 ui:nodegraph:node:size = (123.5, 40)
                int ui:nodegraph:node:stackingOrder = 226
            }

            def Shader "Texcoord"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (90.25, 63.5)
                float2 ui:nodegraph:node:size = (180.5, 53)
                int ui:nodegraph:node:stackingOrder = 180
            }

            def Shader "Subtract_1"
            {
                uniform token info:id = "ND_subtract_float"
                float inputs:in1.connect = </Root/Helpers/LightBand/Separate2.outputs:outx>
                float inputs:in2 = 0.5
                float inputs:in2.connect = </Root/Helpers/LightBand.inputs:Center_X>
                float outputs:out
                float2 ui:nodegraph:node:pos = (446.25, 88.75)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 224
            }

            def Shader "Multiply_2"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/Helpers/LightBand/Power.outputs:out>
                float inputs:in2 = -50
                float inputs:in2.connect = </Root/Helpers/LightBand.inputs:Sharpness>
                float outputs:out
                float2 ui:nodegraph:node:pos = (761, 138.375)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 234
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Exp"
            {
                uniform token info:id = "ND_exp_float"
                float inputs:in.connect = </Root/Helpers/LightBand/Multiply_2.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (908.25, 138.375)
                float2 ui:nodegraph:node:size = (114.5, 40)
                int ui:nodegraph:node:stackingOrder = 221
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_color3FA"
                color3f inputs:in1.connect = </Root/Helpers/LightBand/Multiply_1.outputs:out>
                float inputs:in2 = 2
                float inputs:in2.connect = </Root/Helpers/LightBand.inputs:Oversaturation>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1188.293, 74.09375)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 194
            }

            def Shader "Multiply_1"
            {
                uniform token info:id = "ND_multiply_color3FA"
                color3f inputs:in1.connect = </Root/Helpers/LightBand.inputs:Color>
                float inputs:in2.connect = </Root/Helpers/LightBand/Exp.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1064.9453, 168.65625)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 200
            }

            def Shader "Gamma"
            {
                uniform token info:id = "ND_power_color3FA"
                prepend color3f inputs:in1.connect = </Root/Helpers/LightBand/Multiply.outputs:out>
                float inputs:in2 = 0.5
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1408.0977, 180.73828)
                float2 ui:nodegraph:node:size = (132.5, 53)
                int ui:nodegraph:node:stackingOrder = 210
            }
        }

        def Shader "Time"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0.5
            float outputs:out
            float2 ui:nodegraph:node:pos = (-499.2578, 223.98828)
            float2 ui:nodegraph:node:size = (116, 53)
            int ui:nodegraph:node:stackingOrder = 1249
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def NodeGraph "TimeRamp" (
            active = true
        )
        {
            float inputs:AscendDelay = 0 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (94.99579, 157.15468)
                        float2 sizeInSubgraph = (149.5, 53)
                        int stackingOrderInSubgraph = 1023
                    }
                }
            )
            float inputs:AscendTime = 1 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (89.63135, 250.94093)
                        float2 sizeInSubgraph = (145, 53)
                        int stackingOrderInSubgraph = 1024
                    }
                }
            )
            float inputs:DescentDelay = 2 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (93.02599, 351.38324)
                        float2 sizeInSubgraph = (154, 53)
                        int stackingOrderInSubgraph = 1049
                    }
                }
            )
            float inputs:DescentTime = 1 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (89.29781, 469.2947)
                        float2 sizeInSubgraph = (149.5, 53)
                        int stackingOrderInSubgraph = 987
                    }
                }
            )
            float inputs:Time = 0 (
                colorSpace = ""
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (63.683594, 54.625)
                        float2 sizeInSubgraph = (99, 53)
                        int stackingOrderInSubgraph = 1053
                    }
                }
            )
            float inputs:Time.connect = None
            float outputs:Strength (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 939
                    }
                }
            )
            float outputs:Strength.connect = </Root/Helpers/TimeRamp/Multiply.outputs:out>
            float outputs:TimeSinceDescent (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 939
                    }
                }
            )
            float outputs:TimeSinceDescent.connect = </Root/Helpers/TimeRamp/Subtract_2.outputs:out>
            float2 ui:nodegraph:node:pos = (-510.60547, 438.46207)
            float2 ui:nodegraph:node:size = (124, 199)
            int ui:nodegraph:node:stackingOrder = 1142
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:AscendDelay"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (930.14545, 254.50635)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (195, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1044

            def Shader "Subtract"
            {
                uniform token info:id = "ND_subtract_float"
                float inputs:in1.connect = </Root/Helpers/TimeRamp.inputs:Time>
                float inputs:in2.connect = </Root/Helpers/TimeRamp.inputs:AscendDelay>
                float outputs:out
                float2 ui:nodegraph:node:pos = (247.60156, 75.828125)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 1031
            }

            def Shader "Ascend"
            {
                uniform token info:id = "ND_smoothstep_float"
                float inputs:high.connect = </Root/Helpers/TimeRamp.inputs:AscendTime>
                float inputs:in.connect = </Root/Helpers/TimeRamp/Subtract.outputs:out>
                float inputs:low.connect = None
                float outputs:out
                float2 ui:nodegraph:node:pos = (449.51056, 84.25179)
                float2 ui:nodegraph:node:size = (111, 145)
                int ui:nodegraph:node:stackingOrder = 983
            }

            def Shader "Descend"
            {
                uniform token info:id = "ND_smoothstep_float"
                float inputs:high = 0
                float inputs:in.connect = </Root/Helpers/TimeRamp/Subtract_2.outputs:out>
                float inputs:low.connect = </Root/Helpers/TimeRamp.inputs:DescentTime>
                float outputs:out
                float2 ui:nodegraph:node:pos = (601.39655, 425.93555)
                float2 ui:nodegraph:node:size = (111, 145)
                int ui:nodegraph:node:stackingOrder = 1051
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/Helpers/TimeRamp/Ascend.outputs:out>
                float inputs:in2.connect = </Root/Helpers/TimeRamp/Descend.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (750.1796, 171.2963)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1018
            }

            def Shader "Subtract_1"
            {
                uniform token info:id = "ND_subtract_float"
                float inputs:in1.connect = </Root/Helpers/TimeRamp/Subtract.outputs:out>
                float inputs:in2.connect = </Root/Helpers/TimeRamp.inputs:AscendTime>
                float outputs:out
                float2 ui:nodegraph:node:pos = (349.21432, 227.76944)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 1040
            }

            def Shader "Subtract_2"
            {
                uniform token info:id = "ND_subtract_float"
                float inputs:in1.connect = </Root/Helpers/TimeRamp/Subtract_1.outputs:out>
                float inputs:in2.connect = </Root/Helpers/TimeRamp.inputs:DescentDelay>
                float outputs:out
                float2 ui:nodegraph:node:pos = (450.51132, 308.79718)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 1037
            }
        }

        def NodeGraph "Rainbow" (
            active = true
        )
        {
            float inputs:Time = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-238.41086, 381.92343)
                        float2 sizeInSubgraph = (99, 53)
                        int stackingOrderInSubgraph = 521
                    }
                }
            )
            float inputs:Time.connect = </Root/Helpers/Time.outputs:out>
            float outputs:Mask (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 583
                    }
                }
            )
            float outputs:Mask.connect = </Root/Helpers/Rainbow/Mask.outputs:SmoothStep_out>
            color3f outputs:Out.connect = </Root/Helpers/Rainbow/IfGreaterOrEqual.outputs:out>
            float2 ui:nodegraph:node:pos = (-41.88182, 236.63672)
            float2 ui:nodegraph:node:size = (105.5, 127)
            int ui:nodegraph:node:stackingOrder = 1248
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:Background"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1028.6268, 135.06715)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (163.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 596

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_color3"
                color3f inputs:in1.connect = </Root/Helpers/Rainbow/Screen.outputs:out>
                color3f inputs:in2
                float inputs:value1.connect = </Root/Helpers/Rainbow.inputs:Time>
                float inputs:value2
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (792.97424, 393.72977)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 602
            }

            def NodeGraph "Flash"
            {
                float inputs:Time = 0 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-70.328125, 89.58984)
                            float2 sizeInSubgraph = (99, 53)
                            int stackingOrderInSubgraph = 480
                        }
                    }
                )
                float inputs:Time.connect = </Root/Helpers/Rainbow.inputs:Time>
                prepend float outputs:Gaussian_out.connect = </Root/Helpers/Rainbow/Flash/Gaussian.outputs:out>
                float2 ui:nodegraph:node:pos = (220.70459, 143.22305)
                float2 ui:nodegraph:node:size = (105.5, 109)
                int ui:nodegraph:node:stackingOrder = 606
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Gaussian_out"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1097.9531, 119.64453)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (163.5, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 478

                def Shader "Multiply"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/Flash/Numerator.outputs:out>
                    float inputs:in2 = 5
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (279.80078, 49.628906)
                    float2 ui:nodegraph:node:size = (60, 36)
                    int ui:nodegraph:node:stackingOrder = 527
                }

                def Shader "Multiply_1"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/Flash/Divide.outputs:out>
                    float inputs:in2 = -1
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (767.6797, 114.32422)
                    float2 ui:nodegraph:node:size = (60, 36)
                    int ui:nodegraph:node:stackingOrder = 531
                }

                def Shader "Gaussian"
                {
                    uniform token info:id = "ND_exp_float"
                    float inputs:in.connect = </Root/Helpers/Rainbow/Flash/Multiply_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (894.8203, 113.21875)
                    float2 ui:nodegraph:node:size = (141.5, 53)
                    int ui:nodegraph:node:stackingOrder = 532
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Divide"
                {
                    uniform token info:id = "ND_divide_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/Flash/Square.outputs:out>
                    float inputs:in2.connect = </Root/Helpers/Rainbow/Flash/Denominator.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (671.3906, 108.4375)
                    float2 ui:nodegraph:node:size = (61.5, 36)
                    int ui:nodegraph:node:stackingOrder = 530
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Square"
                {
                    uniform token info:id = "ND_power_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/Flash/Subtract.outputs:out>
                    float inputs:in2 = 2
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (526.6367, 36.59375)
                    float2 ui:nodegraph:node:size = (129, 53)
                    int ui:nodegraph:node:stackingOrder = 529
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out", "outputs:out"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    int inputs:index
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (-128.0586, -102.97656)
                    float2 ui:nodegraph:node:size = (180.5, 53)
                    int ui:nodegraph:node:stackingOrder = 512
                }

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/Flash/Separate2.outputs:outy>
                    float inputs:in2.connect = </Root/Helpers/Rainbow/Flash/Multiply.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (383.27344, 35.42578)
                    float2 ui:nodegraph:node:size = (61.5, 36)
                    int ui:nodegraph:node:stackingOrder = 528
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/Helpers/Rainbow/Flash/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (86.86328, -108.765625)
                    float2 ui:nodegraph:node:size = (115, 127)
                    int ui:nodegraph:node:stackingOrder = 526
                }

                def Shader "Numerator"
                {
                    uniform token info:id = "ND_power_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/Flash.inputs:Time>
                    float inputs:in2 = 5
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (136.5039, 43.476562)
                    float2 ui:nodegraph:node:size = (151.5, 53)
                    int ui:nodegraph:node:stackingOrder = 535
                }

                def Shader "Denominator"
                {
                    uniform token info:id = "ND_power_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/Flash.inputs:Time>
                    float inputs:in2 = 5
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (144.8164, 122.25391)
                    float2 ui:nodegraph:node:size = (165, 53)
                    int ui:nodegraph:node:stackingOrder = 534
                }
            }

            def NodeGraph "RainbowColors"
            {
                float inputs:Time (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (276.77344, -0.78125)
                            float2 sizeInSubgraph = (99, 53)
                            int stackingOrderInSubgraph = 562
                        }
                    }
                )
                float inputs:Time.connect = </Root/Helpers/Rainbow.inputs:Time>
                prepend color3f outputs:Combine3_out.connect = </Root/Helpers/Rainbow/RainbowColors/Combine3.outputs:out>
                float2 ui:nodegraph:node:pos = (214.44354, 284.35788)
                float2 ui:nodegraph:node:size = (145, 109)
                int ui:nodegraph:node:stackingOrder = 598
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1156.8477, 144.39453)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (216, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 552

                def Shader "Cos_2"
                {
                    uniform token info:id = "ND_cos_float"
                    float inputs:in.connect = </Root/Helpers/Rainbow/RainbowColors/Add_3.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (733.8203, 263.3164)
                    float2 ui:nodegraph:node:size = (126, 53)
                    int ui:nodegraph:node:stackingOrder = 568
                }

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/Helpers/Rainbow/RainbowColors/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (283.32422, 129.3789)
                    float2 ui:nodegraph:node:size = (115, 127)
                    int ui:nodegraph:node:stackingOrder = 564
                }

                def Shader "Cos"
                {
                    uniform token info:id = "ND_cos_float"
                    float inputs:in.connect = </Root/Helpers/Rainbow/RainbowColors/Add_1.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (726, 70.25)
                    float2 ui:nodegraph:node:size = (116, 40)
                    int ui:nodegraph:node:stackingOrder = 522
                }

                def Shader "Add_1"
                {
                    uniform token info:id = "ND_add_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/RainbowColors/Subtract.outputs:out>
                    float inputs:in2 = -1
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (572.25, 70.25)
                    float2 ui:nodegraph:node:size = (61.5, 36.5)
                    int ui:nodegraph:node:stackingOrder = 554
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (98.734375, 126.28516)
                    float2 ui:nodegraph:node:size = (180.5, 53)
                    int ui:nodegraph:node:stackingOrder = 566
                }

                def Shader "Add_3"
                {
                    uniform token info:id = "ND_add_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/RainbowColors/Subtract.outputs:out>
                    float inputs:in2 = 3
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (583.28125, 265.33203)
                    float2 ui:nodegraph:node:size = (61.5, 36.5)
                    int ui:nodegraph:node:stackingOrder = 556
                }

                def Shader "Cos_1"
                {
                    uniform token info:id = "ND_cos_float"
                    float inputs:in.connect = </Root/Helpers/Rainbow/RainbowColors/Add_2.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (734.9531, 169.35938)
                    float2 ui:nodegraph:node:size = (122.5, 53)
                    int ui:nodegraph:node:stackingOrder = 530
                }

                def Shader "Combine3"
                {
                    uniform token info:id = "ND_combine3_color3"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/RainbowColors/Cos.outputs:out>
                    float inputs:in2.connect = </Root/Helpers/Rainbow/RainbowColors/Cos_1.outputs:out>
                    float inputs:in3.connect = </Root/Helpers/Rainbow/RainbowColors/Cos_2.outputs:out>
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (921.6367, 167.35938)
                    float2 ui:nodegraph:node:size = (145, 54)
                    int ui:nodegraph:node:stackingOrder = 550
                }

                def Shader "Add_2"
                {
                    uniform token info:id = "ND_add_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/RainbowColors/Subtract.outputs:out>
                    float inputs:in2 = 1
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (583.3633, 163.32422)
                    float2 ui:nodegraph:node:size = (61.5, 36.5)
                    int ui:nodegraph:node:stackingOrder = 555
                }

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/RainbowColors.inputs:Time>
                    float inputs:in2.connect = </Root/Helpers/Rainbow/RainbowColors/Separate2.outputs:outy>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (445, 127.25)
                    float2 ui:nodegraph:node:size = (61.5, 36)
                    int ui:nodegraph:node:stackingOrder = 557
                }
            }

            def Shader "Screen"
            {
                uniform token info:id = "ND_screen_color3"
                color3f inputs:bg.connect = </Root/Helpers/Rainbow/RainbowColors.outputs:Combine3_out>
                color3f inputs:fg.connect = </Root/Helpers/Rainbow/Convert.outputs:out>
                float inputs:mix
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (555.16016, 275.4336)
                float2 ui:nodegraph:node:size = (109, 145)
                int ui:nodegraph:node:stackingOrder = 605
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_color3"
                float inputs:in.connect = </Root/Helpers/Rainbow/Flash.outputs:Gaussian_out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (371.05078, 180.10156)
                float2 ui:nodegraph:node:size = (135.5, 40)
                int ui:nodegraph:node:stackingOrder = 603
            }

            def NodeGraph "Mask"
            {
                float inputs:Time (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (282.76562, 106.54297)
                            float2 sizeInSubgraph = (99, 53)
                            int stackingOrderInSubgraph = 713
                        }
                    }
                )
                prepend float inputs:Time.connect = </Root/Helpers/Rainbow.inputs:Time>
                prepend float outputs:SmoothStep_out.connect = </Root/Helpers/Rainbow/Mask/SmoothStep.outputs:out>
                float2 ui:nodegraph:node:pos = (218.95815, -17.160156)
                float2 ui:nodegraph:node:size = (110, 109)
                int ui:nodegraph:node:stackingOrder = 583
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1067.3438, 118.64844)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (182, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 676

                def Shader "Separate2"
                {
                    uniform token info:id = "ND_separate2_vector2"
                    float2 inputs:in.connect = </Root/Helpers/Rainbow/Mask/Texcoord.outputs:out>
                    float outputs:outx
                    float outputs:outy
                    float2 ui:nodegraph:node:pos = (665.77734, -43.90625)
                    float2 ui:nodegraph:node:size = (115, 127)
                    int ui:nodegraph:node:stackingOrder = 692
                }

                def Shader "Texcoord"
                {
                    uniform token info:id = "ND_texcoord_vector2"
                    float2 outputs:out
                    float2 ui:nodegraph:node:pos = (463.75, -37.171875)
                    float2 ui:nodegraph:node:size = (180.5, 53)
                    int ui:nodegraph:node:stackingOrder = 694
                }

                def Shader "SmoothStep"
                {
                    uniform token info:id = "ND_smoothstep_float"
                    float inputs:high.connect = </Root/Helpers/Rainbow/Mask/Subtract.outputs:out>
                    float inputs:in.connect = </Root/Helpers/Rainbow/Mask/Separate2.outputs:outy>
                    float inputs:low.connect = </Root/Helpers/Rainbow/Mask/Add.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (853.25, 96)
                    float2 ui:nodegraph:node:size = (127.5, 145)
                    int ui:nodegraph:node:stackingOrder = 729
                }

                def Shader "Power"
                {
                    uniform token info:id = "ND_power_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/Mask.inputs:Time>
                    float inputs:in2 = 5
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (433.6328, 114.08984)
                    float2 ui:nodegraph:node:size = (123.5, 40)
                    int ui:nodegraph:node:stackingOrder = 711
                }

                def Shader "Subtract"
                {
                    uniform token info:id = "ND_subtract_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/Mask/Multiply.outputs:out>
                    float inputs:in2 = 0.3
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (689.65234, 157.48047)
                    float2 ui:nodegraph:node:size = (61.5, 36)
                    int ui:nodegraph:node:stackingOrder = 732
                }

                def Shader "Add"
                {
                    uniform token info:id = "ND_add_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/Mask/Multiply.outputs:out>
                    float inputs:in2 = 0.3
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (686.0781, 92.24219)
                    float2 ui:nodegraph:node:size = (61.5, 36.5)
                    int ui:nodegraph:node:stackingOrder = 731
                }

                def Shader "Multiply"
                {
                    uniform token info:id = "ND_multiply_float"
                    float inputs:in1.connect = </Root/Helpers/Rainbow/Mask/Power.outputs:out>
                    float inputs:in2 = 5
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (567.51953, 127.55469)
                    float2 ui:nodegraph:node:size = (60, 36)
                    int ui:nodegraph:node:stackingOrder = 709
                }
            }
        }

        def NodeGraph "Hull"
        {
            color3f outputs:Multiply_3_out.connect = </Root/Helpers/Hull/Multiply.outputs:out>
            float2 ui:nodegraph:node:pos = (-355.76172, 381.97266)
            float2 ui:nodegraph:node:size = (105.5, 81)
            int ui:nodegraph:node:stackingOrder = 1149
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1620.2327, 178.7101)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (214.01338, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 971

            def Shader "Texcoord"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (77.562485, 144.3507)
                float2 ui:nodegraph:node:size = (180.5, 53)
                int ui:nodegraph:node:stackingOrder = 962
            }

            def Shader "HSV"
            {
                uniform token info:id = "ND_combine3_color3"
                float inputs:in1 = 0.1
                float inputs:in1.connect = </Root/Helpers/Hull/Noise.outputs:out>
                float inputs:in2 = 0.5
                float inputs:in3 = 0.8
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (974.25, 34.375)
                float2 ui:nodegraph:node:size = (131.5, 54)
                int ui:nodegraph:node:stackingOrder = 960
            }

            def Shader "HSVToRGB"
            {
                uniform token info:id = "ND_hsvtorgb_color3"
                color3f inputs:in.connect = </Root/Helpers/Hull/HSV.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1177.5, 34.375)
                float2 ui:nodegraph:node:size = (155, 53)
                int ui:nodegraph:node:stackingOrder = 921
            }

            def Shader "Multiply_3"
            {
                uniform token info:id = "ND_multiply_color3FA"
                color3f inputs:in1.connect = </Root/Helpers/Hull/HSVToRGB.outputs:out>
                float inputs:in2.connect = </Root/Helpers/Hull/Remap.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1345, 63.9375)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 921
            }

            def Shader "Multiply_1"
            {
                uniform token info:id = "ND_multiply_vector2"
                float2 inputs:in1.connect = </Root/Helpers/Hull/Texcoord.outputs:out>
                float2 inputs:in2 = (3, 3)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (349.13315, 3.1847017)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 959
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
            }

            def Shader "Separate2"
            {
                uniform token info:id = "ND_separate2_vector2"
                float2 inputs:in.connect = </Root/Helpers/Hull/Texcoord.outputs:out>
                float outputs:outx
                float outputs:outy
                float2 ui:nodegraph:node:pos = (434.75, 295)
                float2 ui:nodegraph:node:size = (115, 127)
                int ui:nodegraph:node:stackingOrder = 985
            }

            def Shader "SmoothStep"
            {
                uniform token info:id = "ND_smoothstep_float"
                float inputs:high = 0
                float inputs:in.connect = </Root/Helpers/Hull/Separate2.outputs:outy>
                float inputs:low = 0.8
                float outputs:out
                float2 ui:nodegraph:node:pos = (717.2632, 252.58784)
                float2 ui:nodegraph:node:size = (127.5, 145)
                int ui:nodegraph:node:stackingOrder = 982
            }

            def Shader "Noise"
            {
                uniform token info:id = "ND_noise2d_float"
                float inputs:amplitude = 0.1
                float inputs:pivot = 0.15
                float2 inputs:texcoord.connect = </Root/Helpers/Hull/Multiply_1.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (564.92017, -40.209557)
                float2 ui:nodegraph:node:size = (148.5, 145)
                int ui:nodegraph:node:stackingOrder = 957
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:pivot", "inputs:amplitude", "inputs:amplitude", "inputs:texcoord"]
            }

            def Shader "Modulo"
            {
                uniform token info:id = "ND_modulo_float"
                float inputs:in1.connect = </Root/Helpers/Hull/Separate2.outputs:outy>
                float inputs:in2 = 0.1
                float outputs:out
                float2 ui:nodegraph:node:pos = (754.1898, 474.8151)
                float2 ui:nodegraph:node:size = (63, 38.5)
                int ui:nodegraph:node:stackingOrder = 965
            }

            def Shader "Ifgreater"
            {
                uniform token info:id = "ND_ifgreater_color3"
                color3f inputs:in1 = (0.5, 0.5, 0.5) (
                    colorSpace = "srgb_texture"
                )
                color3f inputs:in2 = (1, 1, 1) (
                    colorSpace = "srgb_texture"
                )
                float inputs:value1 = 0.001
                prepend float inputs:value2.connect = </Root/Helpers/Hull/Modulo.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1009.98114, 480.1342)
                float2 ui:nodegraph:node:size = (109, 163)
                int ui:nodegraph:node:stackingOrder = 984
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:value1", "inputs:in2"]
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_color3"
                color3f inputs:in1.connect = </Root/Helpers/Hull/Multiply_3.outputs:out>
                color3f inputs:in2.connect = </Root/Helpers/Hull/Ifgreater.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1410.4186, 264.74094)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 969
            }

            def Shader "Remap"
            {
                uniform token info:id = "ND_remap_float"
                float inputs:in.connect = </Root/Helpers/Hull/SmoothStep.outputs:out>
                float inputs:outhigh = 0.8
                float inputs:outlow = 0.1
                float outputs:out
                float2 ui:nodegraph:node:pos = (943.0045, 249.23398)
                float2 ui:nodegraph:node:size = (94, 181)
                int ui:nodegraph:node:stackingOrder = 983
            }
        }
    }

    def Material "ClockMaterial"
    {
        reorder nameChildren = ["PreviewSurface", "Time", "Digit0", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9"]
        prepend token outputs:mtlx:surface.connect = </Root/ClockMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1247.25, 746.75)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1103

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor.connect = </Root/ClockMaterial/Multiply_8.outputs:out>
            float inputs:metallic
            float3 inputs:normal
            float inputs:opacity
            float inputs:roughness
            token outputs:out
            float2 ui:nodegraph:node:pos = (1022.25, 746.75)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 1105
        }

        def Shader "Time"
        {
            uniform token info:id = "ND_time_float"
            float outputs:out
            float2 ui:nodegraph:node:pos = (61.25, 841.5)
            float2 ui:nodegraph:node:size = (122.5, 53)
            int ui:nodegraph:node:stackingOrder = 1086
        }

        def NodeGraph "Digit0"
        {
            reorder nameChildren = ["Divide", "Texcoord", "Multiply", "Oneminus", "IfGreaterOrEqual", "FractionToColor", "Fractional", "Power", "Ifgreater", "Separate2", "Add"]
            float inputs:Digit = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (40.06114, 296.18777)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 1165
                    }
                }
            )
            float inputs:Input (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (331.76788, 14.942514)
                        float2 sizeInSubgraph = (100, 53)
                        int stackingOrderInSubgraph = 1161
                    }
                }
            )
            float inputs:Input.connect = </Root/ClockMaterial/Time.outputs:out>
            color3f outputs:Ifgreater_out.connect = </Root/ClockMaterial/Digit0/Ifgreater.outputs:out>
            float2 ui:nodegraph:node:pos = (265.25, 63.5)
            float2 ui:nodegraph:node:size = (105.5, 127)
            int ui:nodegraph:node:stackingOrder = 1089
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (2263.0554, 414.16086)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (208.29251, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1200

            def Shader "Divide"
            {
                uniform token info:id = "ND_divide_float"
                float inputs:in1.connect = </Root/ClockMaterial/Digit0.inputs:Input>
                float inputs:in2 = 10
                float inputs:in2.connect = </Root/ClockMaterial/Digit0/Power.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (496.77737, 106.59493)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 1163
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out", "outputs:out"]
            }

            def Shader "Texcoord"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (1002.8891, 510.31815)
                float2 ui:nodegraph:node:size = (180.5, 53)
                int ui:nodegraph:node:stackingOrder = 1192
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/ClockMaterial/Digit0/Oneminus.outputs:out>
                float inputs:in2 = 10
                float outputs:out
                float2 ui:nodegraph:node:pos = (1481.2289, 554.98096)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1194
            }

            def Shader "Oneminus"
            {
                uniform token info:id = "ND_realitykit_oneminus_float"
                float inputs:in.connect = </Root/ClockMaterial/Digit0/Separate2.outputs:outx>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1351.7124, 522.33685)
                float2 ui:nodegraph:node:size = (158, 109)
                int ui:nodegraph:node:stackingOrder = 1188
            }

            def Shader "IfGreaterOrEqual"
            {
                uniform token info:id = "ND_ifgreatereq_color3"
                color3f inputs:in1.connect = </Root/ClockMaterial/Digit0/HSVToRGB.outputs:out>
                color3f inputs:in2 = (1, 1, 1) (
                    colorSpace = "srgb_texture"
                )
                float inputs:value1.connect = </Root/ClockMaterial/Digit0/Multiply.outputs:out>
                float inputs:value2.connect = </Root/ClockMaterial/Digit0.inputs:Digit>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1768.2482, 372.20065)
                float2 ui:nodegraph:node:size = (157, 163)
                int ui:nodegraph:node:stackingOrder = 1196
            }

            def Shader "Fractional"
            {
                uniform token info:id = "ND_realitykit_fractional_float"
                float inputs:in.connect = </Root/ClockMaterial/Digit0/Divide.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (664.29834, 92.23843)
                float2 ui:nodegraph:node:size = (154.5, 109)
                int ui:nodegraph:node:stackingOrder = 1202
            }

            def Shader "Power"
            {
                uniform token info:id = "ND_power_float"
                float inputs:in1 = 10
                float inputs:in2.connect = </Root/ClockMaterial/Digit0/Add.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (341.25, 171.5)
                float2 ui:nodegraph:node:size = (123.5, 40)
                int ui:nodegraph:node:stackingOrder = 1182
            }

            def Shader "Ifgreater"
            {
                uniform token info:id = "ND_ifgreater_color3"
                color3f inputs:in1.connect = </Root/ClockMaterial/Digit0/IfGreaterOrEqual.outputs:out>
                color3f inputs:in2 = (1, 1, 1) (
                    colorSpace = "srgb_texture"
                )
                float inputs:value1.connect = </Root/ClockMaterial/Digit0/Add.outputs:out>
                float inputs:value2.connect = </Root/ClockMaterial/Digit0/Multiply.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1944.5925, 368.869)
                float2 ui:nodegraph:node:size = (109, 163)
                int ui:nodegraph:node:stackingOrder = 1198
            }

            def Shader "Separate2"
            {
                uniform token info:id = "ND_separate2_vector2"
                float2 inputs:in.connect = </Root/ClockMaterial/Digit0/Texcoord.outputs:out>
                float outputs:outx
                float outputs:outy
                float2 ui:nodegraph:node:pos = (1194.0994, 515.38513)
                float2 ui:nodegraph:node:size = (115, 127)
                int ui:nodegraph:node:stackingOrder = 1190
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/ClockMaterial/Digit0.inputs:Digit>
                float inputs:in2 = 1
                float outputs:out
                float2 ui:nodegraph:node:pos = (205.00786, 231.59045)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 1181
            }

            def Shader "Divide2"
            {
                uniform token info:id = "ND_divide_float"
                float inputs:in1.connect = </Root/ClockMaterial/Digit0/Floor.outputs:out>
                float inputs:in2 = 10
                float outputs:out
                float2 ui:nodegraph:node:pos = (1116.509, 126.742516)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 1322
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
            }

            def Shader "HSVToRGB"
            {
                uniform token info:id = "ND_hsvtorgb_color3"
                color3f inputs:in.connect = </Root/ClockMaterial/Digit0/Combine3.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1502.3414, 146.17096)
                float2 ui:nodegraph:node:size = (155, 53)
                int ui:nodegraph:node:stackingOrder = 1329
            }

            def Shader "Combine3"
            {
                uniform token info:id = "ND_combine3_color3"
                float inputs:in1.connect = </Root/ClockMaterial/Digit0/Divide2.outputs:out>
                float inputs:in2 = 1
                float inputs:in2.connect = None
                float inputs:in3 = 1
                float inputs:in3.connect = None
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1297.6842, 145.91415)
                float2 ui:nodegraph:node:size = (145, 54)
                int ui:nodegraph:node:stackingOrder = 1327
            }

            def Shader "Multiply_9"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/ClockMaterial/Digit0/Fractional.outputs:out>
                float inputs:in2 = 10
                float outputs:out
                float2 ui:nodegraph:node:pos = (829, 118.5)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1156
            }

            def Shader "Floor"
            {
                uniform token info:id = "ND_floor_float"
                float inputs:in.connect = </Root/ClockMaterial/Digit0/Multiply_9.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (974.7539, 120.801384)
                float2 ui:nodegraph:node:size = (118, 40)
                int ui:nodegraph:node:stackingOrder = 1261
            }
        }

        def "Digit1" (
            active = true
            instanceable = true
            references = </Root/ClockMaterial/Digit0>
        )
        {
            float inputs:Digit = 1 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (70.75, 314)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 1073
                    }
                }
            )
            float inputs:Input (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (413.25, 32.75)
                        float2 sizeInSubgraph = (100, 53)
                        int stackingOrderInSubgraph = 1074
                    }
                }
            )
            float inputs:Input.connect = </Root/ClockMaterial/Time.outputs:out>
            float2 ui:nodegraph:node:pos = (265.25, 250.5)
            float2 ui:nodegraph:node:size = (103.5, 127)
            int ui:nodegraph:node:stackingOrder = 1100
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (208, 81)
        }

        def "Digit2" (
            active = true
            instanceable = true
            references = </Root/ClockMaterial/Digit0>
        )
        {
            float inputs:Digit = 2 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (70.75, 314)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 1073
                    }
                }
            )
            float inputs:Input (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (413.25, 32.75)
                        float2 sizeInSubgraph = (100, 53)
                        int stackingOrderInSubgraph = 1074
                    }
                }
            )
            float inputs:Input.connect = </Root/ClockMaterial/Time.outputs:out>
            color3f outputs:Ifgreater_out.connect = </Root/ClockMaterial/Digit2/Ifgreater.outputs:out>
            float2 ui:nodegraph:node:pos = (265.25, 437.5)
            float2 ui:nodegraph:node:size = (103.5, 127)
            int ui:nodegraph:node:stackingOrder = 1099
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Ifgreater_out"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (208, 81)
        }

        def "Digit3" (
            active = true
            instanceable = true
            references = </Root/ClockMaterial/Digit0>
        )
        {
            float inputs:Digit = 3
            float inputs:Input.connect = </Root/ClockMaterial/Time.outputs:out>
            color3f outputs:Ifgreater_out.connect = </Root/ClockMaterial/Digit3/Ifgreater.outputs:out>
            float2 ui:nodegraph:node:pos = (265.25, 624.5)
            float2 ui:nodegraph:node:size = (103.5, 127)
            int ui:nodegraph:node:stackingOrder = 1149
        }

        def "Digit4" (
            active = true
            instanceable = true
            references = </Root/ClockMaterial/Digit0>
        )
        {
            float inputs:Digit = 4 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (70.75, 314)
                        float2 sizeInSubgraph = (98, 53)
                        int stackingOrderInSubgraph = 1073
                    }
                }
            )
            float inputs:Input (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (413.25, 32.75)
                        float2 sizeInSubgraph = (100, 53)
                        int stackingOrderInSubgraph = 1074
                    }
                }
            )
            float inputs:Input.connect = </Root/ClockMaterial/Time.outputs:out>
            color3f outputs:Ifgreater_out.connect = </Root/ClockMaterial/Digit4/Ifgreater.outputs:out>
            float2 ui:nodegraph:node:pos = (265.25, 811.5)
            float2 ui:nodegraph:node:size = (103.5, 127)
            int ui:nodegraph:node:stackingOrder = 1142
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (208, 81)
        }

        def "Digit5" (
            active = true
            instanceable = true
            references = </Root/ClockMaterial/Digit0>
        )
        {
            float inputs:Digit = 5
            float inputs:Input.connect = </Root/ClockMaterial/Time.outputs:out>
            color3f outputs:Ifgreater_out.connect = </Root/ClockMaterial/Digit5/Ifgreater.outputs:out>
            float2 ui:nodegraph:node:pos = (265.25, 998.5)
            float2 ui:nodegraph:node:size = (103.5, 127)
            int ui:nodegraph:node:stackingOrder = 1138
        }

        def "Digit6" (
            active = true
            instanceable = true
            references = </Root/ClockMaterial/Digit0>
        )
        {
            float inputs:Digit = 6
            float inputs:Input.connect = </Root/ClockMaterial/Time.outputs:out>
            color3f outputs:Ifgreater_out.connect = </Root/ClockMaterial/Digit6/Ifgreater.outputs:out>
            float2 ui:nodegraph:node:pos = (265.25, 1185.5)
            float2 ui:nodegraph:node:size = (103.5, 127)
            int ui:nodegraph:node:stackingOrder = 1132
        }

        def "Digit7" (
            active = true
            instanceable = true
            references = </Root/ClockMaterial/Digit0>
        )
        {
            float inputs:Digit = 7
            float inputs:Input.connect = </Root/ClockMaterial/Time.outputs:out>
            color3f outputs:Ifgreater_out.connect = </Root/ClockMaterial/Digit7/Ifgreater.outputs:out>
            float2 ui:nodegraph:node:pos = (265.25, 1372.5)
            float2 ui:nodegraph:node:size = (103.5, 127)
            int ui:nodegraph:node:stackingOrder = 1130
        }

        def "Digit8" (
            active = true
            instanceable = true
            references = </Root/ClockMaterial/Digit0>
        )
        {
            float inputs:Digit = 8
            float inputs:Input.connect = </Root/ClockMaterial/Time.outputs:out>
            color3f outputs:Ifgreater_out.connect = </Root/ClockMaterial/Digit8/Ifgreater.outputs:out>
            float2 ui:nodegraph:node:pos = (265.25, 1559.5)
            float2 ui:nodegraph:node:size = (103.5, 127)
            int ui:nodegraph:node:stackingOrder = 1125
        }

        def "Digit9" (
            active = true
            instanceable = true
            references = </Root/ClockMaterial/Digit0>
        )
        {
            float inputs:Digit = 9
            float inputs:Input.connect = </Root/ClockMaterial/Time.outputs:out>
            color3f outputs:Ifgreater_out.connect = </Root/ClockMaterial/Digit9/Ifgreater.outputs:out>
            float2 ui:nodegraph:node:pos = (265.25, 1746.5)
            float2 ui:nodegraph:node:size = (103.5, 127)
            int ui:nodegraph:node:stackingOrder = 1123
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_color3"
            color3f inputs:in1.connect = </Root/ClockMaterial/Digit0.outputs:Ifgreater_out>
            color3f inputs:in2.connect = </Root/ClockMaterial/Digit1.outputs:Ifgreater_out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (468, 93.5)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 1101
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_color3"
            color3f inputs:in1.connect = </Root/ClockMaterial/Digit8.outputs:Ifgreater_out>
            color3f inputs:in2.connect = </Root/ClockMaterial/Digit9.outputs:Ifgreater_out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (618, 1579.5)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 1128
        }

        def Shader "Multiply_3"
        {
            uniform token info:id = "ND_multiply_color3"
            color3f inputs:in1.connect = </Root/ClockMaterial/Digit6.outputs:Ifgreater_out>
            color3f inputs:in2.connect = </Root/ClockMaterial/Digit7.outputs:Ifgreater_out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (468, 1215.5)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 1144
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_color3"
            color3f inputs:in1.connect = </Root/ClockMaterial/Digit2.outputs:Ifgreater_out>
            color3f inputs:in2.connect = </Root/ClockMaterial/Digit3.outputs:Ifgreater_out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (468, 467.5)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 1147
        }

        def Shader "Multiply_4"
        {
            uniform token info:id = "ND_multiply_color3"
            color3f inputs:in1.connect = </Root/ClockMaterial/Digit4.outputs:Ifgreater_out>
            color3f inputs:in2.connect = </Root/ClockMaterial/Digit5.outputs:Ifgreater_out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (468, 841.5)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 1150
        }

        def Shader "Multiply_5"
        {
            uniform token info:id = "ND_multiply_color3"
            color3f inputs:in1.connect = </Root/ClockMaterial/Multiply.outputs:out>
            color3f inputs:in2.connect = </Root/ClockMaterial/Multiply_2.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (738, 252.5)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 1151
        }

        def Shader "Multiply_6"
        {
            uniform token info:id = "ND_multiply_color3"
            color3f inputs:in1.connect = </Root/ClockMaterial/Multiply_4.outputs:out>
            color3f inputs:in2.connect = </Root/ClockMaterial/Multiply_3.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (618, 1010.5)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 1152
        }

        def Shader "Multiply_7"
        {
            uniform token info:id = "ND_multiply_color3"
            color3f inputs:in1.connect = </Root/ClockMaterial/Multiply_6.outputs:out>
            color3f inputs:in2.connect = </Root/ClockMaterial/Multiply_1.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (738, 1277)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 1153
        }

        def Shader "Multiply_8"
        {
            uniform token info:id = "ND_multiply_color3"
            color3f inputs:in1.connect = </Root/ClockMaterial/Multiply_5.outputs:out>
            color3f inputs:in2.connect = </Root/ClockMaterial/Multiply_7.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (858, 746.75)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 1154
        }
    }

    def Material "TestMaterial"
    {
        prepend token outputs:mtlx:surface.connect = </Root/TestMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (299.25, 99.5)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            token outputs:out
            float2 ui:nodegraph:node:pos = (74.25, 99.5)
            float2 ui:nodegraph:node:size = (148.5, 199)
        }
    }
}

