#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "GridMaterial"]

def Xform "Root"
{
    reorder nameChildren = ["LightBand", "MyMaterial", "Sphere", "Helpers", "NodeGraph"]
    def Material "MyMaterial"
    {
        reorder nameChildren = ["LightBands", "Screen", "Multiply", "Metal", "PreviewSurface", "TimeRamp_1"]
        float inputs:Time = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-49.822838, 422.01953)
                    float2 sizeInSubgraph = (99, 53)
                    int stackingOrderInSubgraph = 792
                }
            }
        )
        prepend token outputs:mtlx:surface.connect = </Root/MyMaterial/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (914.75, 159)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 188

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            float inputs:clearcoat
            float inputs:clearcoatRoughness
            color3f inputs:diffuseColor = (0.46135616, 0.017613119, 0) (
                colorSpace = "srgb_displayp3"
            )
            color3f inputs:diffuseColor.connect = </Root/MyMaterial/Screen.outputs:out>
            color3f inputs:emissiveColor
            float inputs:ior
            float inputs:metallic = 1
            float3 inputs:normal
            float inputs:occlusion
            float inputs:opacity = 1
            float inputs:opacityThreshold
            float inputs:roughness
            token outputs:out
            float2 ui:nodegraph:node:pos = (684.25, 159)
            float2 ui:nodegraph:node:size = (159.5, 307)
            int ui:nodegraph:node:stackingOrder = 724
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:opacityThreshold", "Advanced"]
        }

        def NodeGraph "Metal"
        {
            prepend color3f outputs:Multiply_3_out.connect = </Root/MyMaterial/Metal/Multiply_3.outputs:out>
            float2 ui:nodegraph:node:pos = (279, 199.5)
            float2 ui:nodegraph:node:size = (105.5, 81)
            int ui:nodegraph:node:stackingOrder = 772
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1526, 63.9375)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (214.10759, 81)

            def Shader "Add"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/MyMaterial/Metal/Multiply_2.outputs:out>
                float inputs:in2 = 0.5
                float outputs:out
                float2 ui:nodegraph:node:pos = (812.0547, 107.57422)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 928
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Texcoord"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (90.25, 91)
                float2 ui:nodegraph:node:size = (180.5, 53)
                int ui:nodegraph:node:stackingOrder = 921
            }

            def Shader "HSV"
            {
                uniform token info:id = "ND_combine3_color3"
                float inputs:in1 = 0.1
                float inputs:in1.connect = </Root/MyMaterial/Metal/Hue.outputs:out>
                float inputs:in2 = 0.5
                float inputs:in3 = 1
                float inputs:in3.connect = </Root/MyMaterial/Metal/Add.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (974.25, 34.375)
                float2 ui:nodegraph:node:size = (131.5, 54)
                int ui:nodegraph:node:stackingOrder = 923
            }

            def Shader "Multiply_2"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/MyMaterial/Metal/Hue.outputs:out>
                float inputs:in2 = 5
                float outputs:out
                float2 ui:nodegraph:node:pos = (644.27734, 168.79297)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 927
            }

            def Shader "HSVToRGB"
            {
                uniform token info:id = "ND_hsvtorgb_color3"
                color3f inputs:in.connect = </Root/MyMaterial/Metal/HSV.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1177.5, 34.375)
                float2 ui:nodegraph:node:size = (155, 53)
                int ui:nodegraph:node:stackingOrder = 921
            }

            def Shader "Texcoord_1"
            {
                uniform token info:id = "ND_texcoord_vector2"
                int inputs:index
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (90.25, 295)
                float2 ui:nodegraph:node:size = (180.5, 53)
                int ui:nodegraph:node:stackingOrder = 921
            }

            def Shader "Multiply_3"
            {
                uniform token info:id = "ND_multiply_color3FA"
                color3f inputs:in1.connect = </Root/MyMaterial/Metal/HSVToRGB.outputs:out>
                float inputs:in2.connect = </Root/MyMaterial/Metal/Oneminus.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1345, 63.9375)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 921
            }

            def Shader "Multiply_1"
            {
                uniform token info:id = "ND_multiply_vector2"
                float2 inputs:in1.connect = </Root/MyMaterial/Metal/Texcoord.outputs:out>
                float2 inputs:in2 = (3, 3)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (270.5, 91)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 921
            }

            def Shader "Hue"
            {
                uniform token info:id = "ND_noise2d_float"
                float inputs:amplitude = 0.1
                float inputs:pivot = 0.15
                float2 inputs:texcoord.connect = </Root/MyMaterial/Metal/Multiply_1.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (434.75, 91)
                float2 ui:nodegraph:node:size = (148.5, 145)
                int ui:nodegraph:node:stackingOrder = 922
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:pivot", "inputs:amplitude", "inputs:amplitude", "inputs:texcoord"]
            }

            def Shader "Oneminus"
            {
                uniform token info:id = "ND_realitykit_oneminus_float"
                float inputs:in.connect = </Root/MyMaterial/Metal/Separate2.outputs:outy>
                float outputs:out
                float2 ui:nodegraph:node:pos = (648, 295)
                float2 ui:nodegraph:node:size = (158, 109)
                int ui:nodegraph:node:stackingOrder = 935
            }

            def Shader "Separate2"
            {
                uniform token info:id = "ND_separate2_vector2"
                float2 inputs:in.connect = </Root/MyMaterial/Metal/Texcoord_1.outputs:out>
                float outputs:outx
                float outputs:outy
                float2 ui:nodegraph:node:pos = (434.75, 295)
                float2 ui:nodegraph:node:size = (115, 127)
                int ui:nodegraph:node:stackingOrder = 932
            }
        }

        def NodeGraph "LightBands"
        {
            color3f outputs:Screen_out.connect = </Root/MyMaterial/LightBands/Screen_2.outputs:out>
            float2 ui:nodegraph:node:pos = (61.25, 40.5)
            float2 ui:nodegraph:node:size = (122.5, 81)
            int ui:nodegraph:node:stackingOrder = 774
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:Screen_out"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (626, 262)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (200.25578, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 283

            def Shader "Screen"
            {
                uniform token info:id = "ND_screen_color3"
                color3f inputs:bg.connect = </Root/MyMaterial/LightBands/Pink2.outputs:Multiply_out>
                color3f inputs:fg.connect = </Root/MyMaterial/LightBands/Orange1.outputs:Multiply_out>
                float inputs:mix = 1
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (240, 111.5)
                float2 ui:nodegraph:node:size = (109, 145)
                int ui:nodegraph:node:stackingOrder = 276
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:mix"]
            }

            def "Orange1" (
                active = true
                instanceable = true
                references = </Root/Helpers/LightBand>
            )
            {
                float inputs:Center_X = 0.05 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (187.42912, 261.4297)
                            float2 sizeInSubgraph = (126.5, 53)
                            int stackingOrderInSubgraph = 187
                        }
                    }
                )
                color3f inputs:Color = (1, 0.84493464, 0.63382) (
                    colorSpace = "srgb_texture"
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (916, 316)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 186
                        }
                    }
                )
                float inputs:Oversaturation = 1.5 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1013.91406, 336.05078)
                            float2 sizeInSubgraph = (160.5, 53)
                        }
                    }
                )
                float inputs:Sharpness = -5000 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (563.1331, 250.48735)
                            float2 sizeInSubgraph = (134, 53)
                            int stackingOrderInSubgraph = 185
                        }
                    }
                )
                color3f outputs:Multiply_out.connect = </Root/MyMaterial/LightBands/Orange1/Multiply.outputs:out>
                float2 ui:nodegraph:node:pos = (62.75, 81.5)
                float2 ui:nodegraph:node:size = (125.5, 163)
                int ui:nodegraph:node:stackingOrder = 350
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (173, 81)
            }

            def Shader "Screen_1"
            {
                uniform token info:id = "ND_screen_color3"
                color3f inputs:bg.connect = </Root/MyMaterial/LightBands/Orange4.outputs:Multiply_out>
                color3f inputs:fg.connect = </Root/MyMaterial/LightBands/Pink3.outputs:Multiply_out>
                float inputs:mix = 1
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (240, 557.5)
                float2 ui:nodegraph:node:size = (109, 145)
                int ui:nodegraph:node:stackingOrder = 272
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:mix"]
            }

            def Shader "Screen_2"
            {
                uniform token info:id = "ND_screen_color3"
                color3f inputs:bg.connect = </Root/MyMaterial/LightBands/Screen_1.outputs:out>
                color3f inputs:fg.connect = </Root/MyMaterial/LightBands/Screen.outputs:out>
                float inputs:mix
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (410.25, 262)
                float2 ui:nodegraph:node:size = (111.5, 145)
                int ui:nodegraph:node:stackingOrder = 279
            }

            def "Pink2" (
                active = true
                instanceable = true
                references = </Root/Helpers/LightBand>
            )
            {
                float inputs:Center_X = 0.15 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (187.42912, 261.4297)
                            float2 sizeInSubgraph = (110, 53)
                            int stackingOrderInSubgraph = 187
                        }
                    }
                )
                color3f inputs:Color (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (916, 316)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 186
                        }
                    }
                )
                float inputs:Oversaturation (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1013.91406, 336.05078)
                            float2 sizeInSubgraph = (160.5, 53)
                        }
                    }
                )
                float inputs:Sharpness = -1000 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (563.1331, 250.48735)
                            float2 sizeInSubgraph = (134, 53)
                            int stackingOrderInSubgraph = 185
                        }
                    }
                )
                color3f outputs:Multiply_out.connect = </Root/MyMaterial/LightBands/Pink2/Multiply.outputs:out>
                float2 ui:nodegraph:node:pos = (62.75, 304.5)
                float2 ui:nodegraph:node:size = (125.5, 163)
                int ui:nodegraph:node:stackingOrder = 347
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (173, 81)
            }

            def "Pink3" (
                active = true
                instanceable = true
                references = </Root/Helpers/LightBand>
            )
            {
                float inputs:Center_X = 0.35 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (187.42912, 261.4297)
                            float2 sizeInSubgraph = (110, 53)
                            int stackingOrderInSubgraph = 187
                        }
                    }
                )
                color3f inputs:Color (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (916, 316)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 186
                        }
                    }
                )
                float inputs:Oversaturation (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (1013.91406, 336.05078)
                            float2 sizeInSubgraph = (160.5, 53)
                        }
                    }
                )
                float inputs:Sharpness = -1000 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (563.1331, 250.48735)
                            float2 sizeInSubgraph = (134, 53)
                            int stackingOrderInSubgraph = 185
                        }
                    }
                )
                color3f outputs:Multiply_out.connect = </Root/MyMaterial/LightBands/Pink3/Multiply.outputs:out>
                float2 ui:nodegraph:node:pos = (62.75, 527.5)
                float2 ui:nodegraph:node:size = (125.5, 163)
                int ui:nodegraph:node:stackingOrder = 348
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (173, 81)
            }

            def "Orange4" (
                active = true
                instanceable = true
                references = </Root/Helpers/LightBand>
            )
            {
                float inputs:Center_X = 0.45 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (187.42912, 261.4297)
                            float2 sizeInSubgraph = (110, 53)
                            int stackingOrderInSubgraph = 187
                        }
                    }
                )
                color3f inputs:Color = (1, 0.84493464, 0.63382) (
                    colorSpace = "srgb_texture"
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (916, 316)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 186
                        }
                    }
                )
                float inputs:Oversaturation = 1.5
                float inputs:Sharpness = -5000 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (563.1331, 250.48735)
                            float2 sizeInSubgraph = (134, 53)
                            int stackingOrderInSubgraph = 185
                        }
                    }
                )
                color3f outputs:Multiply_out.connect = </Root/MyMaterial/LightBands/Orange4/Multiply.outputs:out>
                float2 ui:nodegraph:node:pos = (62.75, 750.5)
                float2 ui:nodegraph:node:size = (125.5, 163)
                int ui:nodegraph:node:stackingOrder = 351
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (205, 81)
            }
        }

        def Shader "Screen"
        {
            uniform token info:id = "ND_screen_color3"
            color3f inputs:bg.connect = </Root/MyMaterial/Metal.outputs:Multiply_3_out>
            color3f inputs:fg.connect = </Root/MyMaterial/Multiply.outputs:out>
            float inputs:mix = 0
            float inputs:mix.connect = </Root/MyMaterial/TimeRamp_1.outputs:Out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (490, 159)
            float2 ui:nodegraph:node:size = (109, 145)
            int ui:nodegraph:node:stackingOrder = 786
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_color3"
            color3f inputs:in1.connect = </Root/MyMaterial/LightBands.outputs:Screen_out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (279, 40.5)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 776
        }

        def "TimeRamp_1" (
            active = true
            instanceable = true
            references = </Root/Helpers/TimeRamp>
        )
        {
            float inputs:RampDownBegin = 6
            float inputs:RampDownTime = 1
            float inputs:RampUpBegin = 1
            float inputs:RampUpTime = 1.5
            float inputs:Time.connect = </Root/MyMaterial.inputs:Time>
            float2 ui:nodegraph:node:pos = (182.10156, 412.39062)
            float2 ui:nodegraph:node:size = (141.5, 181)
            int ui:nodegraph:node:stackingOrder = 797
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:RampDownBegin", "inputs:RampDownBegin", "inputs:RampUpBegin"]
        }
    }

    def Sphere "Sphere" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/MyMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        float3 xformOp:scale = (10, 10, 10)
        float3 xformOp:translate = (0.030768394, -0.35868263, -5.9604645e-8)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Material "Helpers"
    {
        reorder nameChildren = ["PreviewSurface", "LightBand", "TimeRamp", "TimeRamp_1"]
        prepend token outputs:mtlx:surface.connect = </Root/Helpers/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (299.25, 99.5)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 23

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor.connect = </Root/MyMaterial/LightBands.outputs:Screen_out>
            float inputs:metallic
            float3 inputs:normal
            float inputs:opacity
            float inputs:roughness
            token outputs:out
            float2 ui:nodegraph:node:pos = (74.25, 99.5)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 4
        }

        def NodeGraph "LightBand"
        {
            float inputs:Center_X = 0.5 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (298, 240)
                        float2 sizeInSubgraph = (126.5, 53)
                        int stackingOrderInSubgraph = 191
                    }
                }
            )
            color3f inputs:Color = (1, 0.61542875, 0.90818304) (
                colorSpace = "srgb_texture"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (604, 347.5)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 188
                    }
                }
            )
            float inputs:Oversaturation = 2 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (1013.91406, 336.05078)
                        float2 sizeInSubgraph = (160.5, 53)
                    }
                }
            )
            float inputs:Sharpness = -50 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (604, 234.5)
                        float2 sizeInSubgraph = (134, 53)
                        int stackingOrderInSubgraph = 185
                    }
                }
            )
            prepend color3f outputs:Multiply_out.connect = </Root/Helpers/LightBand/Multiply.outputs:out>
            float2 ui:nodegraph:node:pos = (291.75, 340.5)
            float2 ui:nodegraph:node:size = (125.5, 163)
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1368, 200.6875)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (205.49724, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 190

            def Shader "Separate2"
            {
                uniform token info:id = "ND_separate2_vector2"
                float2 inputs:in.connect = </Root/Helpers/LightBand/Texcoord.outputs:out>
                float outputs:outx
                float outputs:outy
                float2 ui:nodegraph:node:pos = (298, 63.5)
                float2 ui:nodegraph:node:size = (115, 127)
                int ui:nodegraph:node:stackingOrder = 181
            }

            def Shader "Power"
            {
                uniform token info:id = "ND_power_float"
                float inputs:in1.connect = </Root/Helpers/LightBand/Subtract_1.outputs:out>
                float inputs:in2 = 2
                float outputs:out
                float2 ui:nodegraph:node:pos = (604, 88.75)
                float2 ui:nodegraph:node:size = (123.5, 40)
                int ui:nodegraph:node:stackingOrder = 183
            }

            def Shader "Texcoord"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (90.25, 63.5)
                float2 ui:nodegraph:node:size = (180.5, 53)
                int ui:nodegraph:node:stackingOrder = 180
            }

            def Shader "Subtract_1"
            {
                uniform token info:id = "ND_subtract_float"
                float inputs:in1.connect = </Root/Helpers/LightBand/Separate2.outputs:outx>
                float inputs:in2 = 0.5
                float inputs:in2.connect = </Root/Helpers/LightBand.inputs:Center_X>
                float outputs:out
                float2 ui:nodegraph:node:pos = (446.25, 88.75)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 182
            }

            def Shader "Multiply_2"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/Helpers/LightBand/Power.outputs:out>
                float inputs:in2 = -50
                float inputs:in2.connect = </Root/Helpers/LightBand.inputs:Sharpness>
                float outputs:out
                float2 ui:nodegraph:node:pos = (761, 138.375)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 184
            }

            def Shader "Exp"
            {
                uniform token info:id = "ND_exp_float"
                float inputs:in.connect = </Root/Helpers/LightBand/Multiply_2.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (908.25, 138.375)
                float2 ui:nodegraph:node:size = (114.5, 40)
                int ui:nodegraph:node:stackingOrder = 179
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_color3FA"
                color3f inputs:in1.connect = </Root/Helpers/LightBand/Multiply_1.outputs:out>
                float inputs:in2 = 2
                float inputs:in2.connect = </Root/Helpers/LightBand.inputs:Oversaturation>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1175.5, 200.6875)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 190
            }

            def Shader "Multiply_1"
            {
                uniform token info:id = "ND_multiply_color3FA"
                color3f inputs:in1.connect = </Root/Helpers/LightBand.inputs:Color>
                float inputs:in2.connect = </Root/Helpers/LightBand/Exp.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (1055.5, 200.6875)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 187
            }
        }

        def NodeGraph "TimeRamp" (
            active = true
        )
        {
            float inputs:RampDownBegin = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-100.46484, 340.1836)
                        float2 sizeInSubgraph = (174, 53)
                        int stackingOrderInSubgraph = 45
                    }
                }
            )
            float inputs:RampDownTime = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-173.03125, 471.36328)
                        float2 sizeInSubgraph = (168.5, 53)
                        int stackingOrderInSubgraph = 50
                    }
                }
            )
            float inputs:RampUpBegin = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-89.6875, 147.9414)
                        float2 sizeInSubgraph = (156.5, 53)
                        int stackingOrderInSubgraph = 44
                    }
                }
            )
            float inputs:RampUpTime = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-94.49609, 250.57422)
                        float2 sizeInSubgraph = (150.5, 53)
                        int stackingOrderInSubgraph = 48
                    }
                }
            )
            float inputs:Time = 0 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-149.29688, -82.75781)
                        float2 sizeInSubgraph = (99, 53)
                        int stackingOrderInSubgraph = 53
                    }
                }
            )
            float outputs:Out.connect = </Root/Helpers/TimeRamp/Multiply.outputs:out>
            float2 ui:nodegraph:node:pos = (106.25, 340.5)
            float2 ui:nodegraph:node:size = (141.5, 181)
            int ui:nodegraph:node:stackingOrder = 6
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (611.75, 153.5)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (116.5, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 46

            def Shader "SmoothStep"
            {
                uniform token info:id = "ND_smoothstep_float"
                float inputs:high.connect = </Root/Helpers/TimeRamp/Add_1.outputs:out>
                float inputs:in.connect = </Root/Helpers/TimeRamp.inputs:Time>
                float inputs:low.connect = </Root/Helpers/TimeRamp.inputs:RampUpBegin>
                float outputs:out
                float2 ui:nodegraph:node:pos = (303.75, 113)
                float2 ui:nodegraph:node:size = (127.5, 145)
                int ui:nodegraph:node:stackingOrder = 40
            }

            def Shader "SmoothStep_1"
            {
                uniform token info:id = "ND_smoothstep_float"
                float inputs:high.connect = </Root/Helpers/TimeRamp.inputs:RampDownBegin>
                float inputs:in.connect = </Root/Helpers/TimeRamp.inputs:Time>
                float inputs:low.connect = </Root/Helpers/TimeRamp/Add.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (303.75, 339)
                float2 ui:nodegraph:node:size = (139.5, 145)
                int ui:nodegraph:node:stackingOrder = 43
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/Helpers/TimeRamp/SmoothStep.outputs:out>
                float inputs:in2.connect = </Root/Helpers/TimeRamp/SmoothStep_1.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (463.5, 153.5)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 41
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/Helpers/TimeRamp.inputs:RampDownBegin>
                float inputs:in2.connect = </Root/Helpers/TimeRamp.inputs:RampDownTime>
                float outputs:out
                float2 ui:nodegraph:node:pos = (96.68359, 418)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 46
            }

            def Shader "Add_1"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/Helpers/TimeRamp.inputs:RampUpBegin>
                float inputs:in2.connect = </Root/Helpers/TimeRamp.inputs:RampUpTime>
                float outputs:out
                float2 ui:nodegraph:node:pos = (45.628906, 214.9375)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 51
            }
        }
    }
}

